
const { GoogleGenAI } = require("@google/genai")
const productController = require("./productController")
const db = require('../models/index.js')

const geminiAi = new GoogleGenAI({})


const category = [
    {
        category: 'PC',
        link: '/pages/pc-gvn'
    },
    {
        category: 'Laptop vƒÉn ph√≤ng',
        link: '/pages/laptop-van-phong'
    },
    {
        category: 'Laptop Gaming',
        link: '/pages/laptop-gaming'
    },
    {
        category: 'M√†n h√¨nh',
        link: '/pages/man-hinh'
    },
    {
        category: 'B√†n ph√≠m',
        link: '/pages/ban-phim-may-tinh'
    },
]

let dataProduct = []
const prompt = `
B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n, chƒÉm s√≥c kh√°ch h√†ng c·ªßa website GearVN - chuy√™n cung c·∫•p PC, Laptop v√† ph·ª• ki·ªán m√°y t√≠nh. website: https://gearvn-rust.vercel.app
N·∫øu t√¨m th·∫•y s·∫£n ph·∫©m ng∆∞·ªùi d√πng c·∫ßn t√¨m th√¨ tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn, tr√¨nh b√†y ƒë·∫πp m·∫Øt chuy√™n nghi·ªáp. Uu ti√™n t√¨m ki·∫øm v√† tr·∫£ v·ªÅ data c√≥ s·∫µn.
N·∫øu kh√¥ng c√≥ th·ª© ng∆∞·ªùi d√πng c·∫ßn t√¨m th√¨ tr·∫£ l·ªùi l√† kh√¥ng c√≥ v√† t√¨m c√°c s·∫£n ph·∫©m c√πng lo·∫°i t∆∞∆°ng t·ª± v√† t√¨m th√¥ng tin b√™n ngo√†i v·ªÅ c·∫•u h√¨nh ho·∫∑c c√°c th·ª© li√™n quan

∆Øu ti√™n tr·∫£ l·ªùi th√¥ng tin s·∫£n ph·∫©m c√≥ s·∫µn t·ª´ database ·ªü ƒë√¢y: ${JSON.stringify(dataProduct)}
`
const text = `
Ph√¢n t√≠ch c√¢u sau v√† tr·∫£ v·ªÅ JSON d·∫°ng:
{ "category": <s·∫£n ph·∫©m vi·∫øt c√°ch nhau b·ªüi d·∫•u g·∫°ch ngang "-">, "price_range": <m·ª©c gi√° n·∫øu c√≥ vi·∫øt c√°ch nhau b·ªüi d·∫•u g·∫°ch ngang "-">, "brand": <h√£ng n·∫øu c√≥ vi·∫øt c√°ch nhau b·ªüi d·∫•u g·∫°ch ngang "-"> }
N·∫øu kh√¥ng th·∫•y th√¨ ƒë·ªÉ null v√† tr·∫£ v·ªÅ th√¥ng b√°o cho ng∆∞·ªùi d√πng l√† kh√¥ng t√¨m th·∫•y ho·∫∑c t√¨m c√°c c·∫•u h√¨nh ph√π h·ª£p t∆∞∆°ng t·ª± kh√°c b√™n ngo√†i.
`
function cleanReply(text) {
  return text
    .replace(/[#*_`~>-]/g, "")       // b·ªè k√Ω t·ª± markdown
    .replace(/üåê/g, "")              // b·ªè emoji web
    .replace(/\n+/g, " ")            // thay xu·ªëng d√≤ng b·∫±ng space
    .replace(/\s{2,}/g, " ")         // gom nhi·ªÅu space th√†nh 1
    .trim()
}

const chatbotController = {
    chatbot: async (req, res) => {
        const { message } = req.body
        console.log('message', message)
            try {
                // AI ph√¢n t√≠ch keyword c√¢u h·ªèi
                // const intentRes = await geminiAi.models.generateContent({
                //     model: "gemini-2.5-flash",
                //     contents: [
                //             {
                //                 role: "user",
                //                 parts: [{ text: `
                //                     Ph√¢n t√≠ch c√¢u h·ªèi v√† tr·∫£ v·ªÅ JSON:
                //                     { "category": <s·∫£n ph·∫©m>, "price_range": <gi√°>, "brand": <h√£ng> }
                //                     N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ null.
                //                     Gi√° tr·ªã c·ªßa m·ªói key s·∫Ω vi·∫øt th∆∞·ªùng v√† lo·∫°i b·ªè c√°c d·∫•u, vi·∫øt li·ªÅn c√°ch nhau b·∫±ng d·∫•u g·∫°ch ngang '-'
                //                     C√¢u h·ªèi: "${message}"` 
                //                 }]
                //             }
                //     ],
                //     config: {
                //         thinkingConfig: {
                //             thinkingBudget: 0, // Disables thinking
                //         }
                //     }
                // })
                // let raw = intentRes.candidates[0].content.parts[0].text

                // raw = raw.replace(/```json|```/g, "").trim()
                // const intent = JSON.parse(raw)
                // console.log('C√¢u h·ªèi', intent)
                // res.json({ reply: cleanReply(response.candidates[0].content.parts[0].text) })

                const products = await db.Product.findAll({
                                include: [
                                    { 
                                        model: db.Brand,
                                        attributes: ['id', 'name'] 
                                    },
                                    { 
                                        model: db.Category,
                                        attributes: ['id', 'tag', 'name', 'slug'] 
                                    },
                                    { 
                                        model: db.Product_images,
                                        attributes: ['id', 'product_id', 'url'] 
                                    },
                                ],
                                logging: false,
                                order: [['createdAt', 'DESC']]
                            }) 
                dataProduct = products 
                const response = await geminiAi.models.generateContent({
                    model: "gemini-2.5-flash",
                    contents: [
                        { 
                            role: "user", 
                            parts: [{ text: `Th√¥ng tin s·∫£n ph·∫©m: ${JSON.stringify(products)}. 
                                H√£y t∆∞ v·∫•n cho kh√°ch m·ªôt c√°ch ng·∫Øn g·ªçn th√¥i: Kh√°ch h·ªèi: ${message} th√¨ h√£y ∆∞u ti√™n t√¨m ki·∫øm th√¥ng tin t·ª´ tr√™n website` }] 
                        },
                       
                    ],
                    config: {
                        thinkingConfig: {
                            thinkingBudget: 0, // Disables thinking
                        },
                        systemInstruction: prompt
                    }
                })
                res.json({ reply: cleanReply(response.candidates[0].content.parts[0].text) })
            } catch (error) {
                res.status(500).json({ error: error.message })
            }
    }}

module.exports = chatbotController 